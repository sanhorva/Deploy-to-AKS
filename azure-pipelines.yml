trigger:
- none

resources:
- repo: self

variables:
  IMAGE_REPO: interiordesign/demo
  TAG: '$(Build.BuildId)'

stages:
# build the docker image and push it to the repo
- stage: Build  
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'dockerhub'
        repository: '$(IMAGE_REPO)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(TAG)

    # Publish the manifests as artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'

# deploy to dev depends on build stage
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    replicaNo: 3
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
    strategy:
     runOnce:
       deploy: 
        steps:
# the deployment stage download the manifests
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'manifests'
            targetPath: '$(Pipeline.Workspace)/manifests'

# tokenize the replica number and replace it with the above given number
        - task: replacetokens@5
          displayName: replace tokens
          inputs:
            rootDirectory: '$(Pipeline.Workspace)/manifests/'
            targetFiles: 'deployment.yml'
            encoding: 'auto'
            tokenPattern: 'custom'
            tokenPrefix: '#'
            tokenSuffix: '#'
            writeBOM: true
            actionOnMissing: 'warn'
            keepToken: false
            actionOnNoFiles: 'continue'
            enableTransforms: false
            enableRecursion: false
            useLegacyPattern: false
            enableTelemetry: true


    # using the manifest/deployment files to deploy the app 
        - task: KubernetesManifest@1
          inputs:
            action: 'deploy'
            namespace: 'default'
            manifests: |
              $(Pipeline.Workspace)/manifests/deployment.yml
              $(Pipeline.Workspace)/manifests/service.yml
            containers: '$(IMAGE_REPO):$(TAG)'